/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package POS;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * カテゴリー管理クラス
 *
 * @author CAO YIQI
 */
public class Category extends javax.swing.JFrame {

    /**
     * 新しいカテゴリー管理フォームを作成します。
     */
    public Category() {
        initComponents(); // GUIコンポーネントの初期化
        tableUpdate(); // テーブルを更新するメソッドを呼び出し
    }

    PreparedStatement pst;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private Connection getConnection() throws ClassNotFoundException, SQLException {
        String url = "jdbc:postgresql://localhost/postgres";
        String username = "postgres";
        String password = "5434";
        Class.forName("org.postgresql.Driver");
        return DriverManager.getConnection(url, username, password);
    }

    private void tableUpdate() {
        // データベース接続情報
        int count;
        try (Connection conn1 = getConnection()) {

            pst = conn1.prepareStatement("SELECT*FROM Category ORDER BY category_id;"); // SQLクエリを準備
            ResultSet rs = pst.executeQuery(); // クエリを実行して結果セットを取得
            ResultSetMetaData rsd = rs.getMetaData(); // 結果セットのメタデータを取得
            count = rsd.getColumnCount(); // カラム数を取得

            DefaultTableModel d = (DefaultTableModel) jTable1.getModel(); // テーブルモデルを取得
            d.setRowCount(0); // テーブルモデルの行数をリセット

            while (rs.next()) {
                ArrayList<String> row = new ArrayList<>(); // 新しい行を作成
                for (int i = 0; i <= count; i++) {
                    row.add(rs.getString("category_id")); //"id"カラムの値を取得して追加
                    row.add(rs.getString("category")); // "category"カラムの値を取得して追加
                    row.add(rs.getString("status")); // "status"カラムの値を取得して追加
                }
                d.addRow(row.toArray()); // 行をテーブルモデルに追加

            }

        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Category.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtcategory = new javax.swing.JTextField();
        txtstatus = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(139, 169, 221));

        jPanel2.setBackground(new java.awt.Color(139, 169, 221));

        jLabel2.setFont(new java.awt.Font("UD デジタル 教科書体 N-B", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("カテゴリー");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("UD デジタル 教科書体 N-B", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("注文・会計");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("UD デジタル 教科書体 N-B", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("在庫");
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("UD デジタル 教科書体 N-B", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("オーダー");
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("UD デジタル 教科書体 N-B", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("商品");
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(jLabel9))
                .addGap(0, 48, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(jLabel2)
                .addGap(35, 35, 35)
                .addComponent(jLabel9)
                .addGap(31, 31, 31)
                .addComponent(jLabel3)
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel5.setFont(new java.awt.Font("UD デジタル 教科書体 N-B", 1, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(139, 169, 221));
        jLabel5.setText("Chiikawa 販売システム");

        jLabel6.setFont(new java.awt.Font("UD デジタル 教科書体 N-R", 0, 24)); // NOI18N
        jLabel6.setText("カテゴリー");

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel7.setText("カテゴリー");

        jLabel8.setText("ステータス");

        txtstatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "公開", "未公開" }));
        txtstatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtstatusActionPerformed(evt);
            }
        });

        jButton1.setText("登録");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("編集");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("削除");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtcategory))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtstatus, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(26, 26, 26))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jButton1)
                .addGap(19, 19, 19)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtcategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtstatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "カテゴリーID", "カテゴリー", "ステータス"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(136, 136, 136))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jLabel6)))
                        .addContainerGap(15, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(47, 47, 47)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(155, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // 更新ボタンのアクションハンドラー
        DefaultTableModel d1 = (DefaultTableModel) jTable1.getModel(); // テーブルモデルを取得
        int selectIndex = jTable1.getSelectedRow(); // 選択された行のインデックスを取得

        int category_id = Integer.parseInt(d1.getValueAt(selectIndex, 0).toString()); // 選択された行のIDを取得
        String category = txtcategory.getText();  // テキストフィールドからカテゴリー名を取得
        String status = txtstatus.getSelectedItem().toString(); // ドロップダウンからステータスを取得

        try (Connection conn1 = getConnection()) {
            // 同じ名前のカテゴリーが他の行に存在するかどうかチェック
            String checkSql = "SELECT COUNT(*) FROM Category WHERE category = ? AND category_id != ?;";
            pst = conn1.prepareStatement(checkSql); // カテゴリーの存在チェッククエリを準備
            pst.setString(1, category); // カテゴリー名をクエリに設定
            pst.setInt(2, category_id); // 現在の行のIDをクエリに設定
            ResultSet rs = pst.executeQuery(); // クエリを実行して結果セットを取得
            if (rs.next()) {
                int count = rs.getInt(1); // 結果セットからカテゴリーの存在数を取得
                if (count > 0) {
                    JOptionPane.showMessageDialog(null, "このカテゴリーはすでに存在します。"); // 重複メッセージを表示                               
                } else {
                    // 名前が他の行に存在しない場合、更新を実行
                    String sql = "UPDATE Category SET category=?, status=? WHERE  category_id=? ;";
                    pst = conn1.prepareStatement(sql); // SQLクエリを準備
                    pst.setString(1, category); // カテゴリー名をクエリに設定
                    pst.setString(2, status); // ステータスをクエリに設定
                    pst.setInt(3, category_id); // IDをクエリに設定
                    int rowsUpdated = pst.executeUpdate(); // クエリを実行して更新された行数を取得

                    if (rowsUpdated > 0) {
                        JOptionPane.showMessageDialog(null, "カテゴリーを更新しました。"); // 成功メッセージを表示
                    } else {
                        JOptionPane.showMessageDialog(null, "更新するカテゴリーが見つかりませんでした。"); // エラーメッセージを表示
                    }

                    tableUpdate(); // テーブルを更新

                    txtcategory.setText(""); // テキストフィールドをクリア
                    txtstatus.setSelectedIndex(0); // ドロップダウンをリセット
                    txtcategory.requestFocus(); // テキストフィールドにフォーカスを移動          
                }

            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Category.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // 削除ボタンのアクションハンドラー
        DefaultTableModel d1 = (DefaultTableModel) jTable1.getModel(); // テーブルモデルを取得
        int selectIndex = jTable1.getSelectedRow(); // 選択された行のインデックスを取得

        int category_id = Integer.parseInt(d1.getValueAt(selectIndex, 0).toString()); // 選択された行のIDを取得
        int dialogResult = JOptionPane.showConfirmDialog(null, "選択したデータを削除しますか？この操作は元に戻せません。", "削除確認", JOptionPane.YES_NO_OPTION); // 確認ダイアログを表示

        if (dialogResult == JOptionPane.YES_OPTION) {  // "はい"が選択された場合

            try (Connection conn1 = getConnection()) {
                // "その他" カテゴリの ID を取得
                String otherCategorySql = "SELECT category_id FROM Category WHERE category = 'その他';";
                pst = conn1.prepareStatement(otherCategorySql); // SQLクエリを準備
                ResultSet rs = pst.executeQuery();
                int otherCategoryId = -1;
                if (rs.next()) {
                    otherCategoryId = rs.getInt("category_id");
                }
                rs.close();
                pst.close();

                if (otherCategoryId == -1) {
                    // "その他" カテゴリが存在しない場合、作成する
                    String insertOtherCategorySql = "INSERT INTO Category (category, status) VALUES ('その他', '公開') RETURNING category_id";
                    pst = conn1.prepareStatement(insertOtherCategorySql); // SQLクエリを準備
                    rs = pst.executeQuery();
                    if (rs.next()) {
                        otherCategoryId = rs.getInt("category_id");
                    }
                    rs.close();
                    pst.close();
                }

                if (otherCategoryId != -1) {
                    // 関連商品のカテゴリを "その他" に更新
                    String updateProductSql = "UPDATE Product SET category_id = ? WHERE category_id = ?;";
                    pst = conn1.prepareStatement(updateProductSql); // SQLクエリを準備
                    pst.setInt(1, otherCategoryId);
                    pst.setInt(2, category_id);
                    pst.executeUpdate();
                    pst.close();

                    // 選択されたカテゴリを削除
                    String deleteCategorySql = "DELETE FROM Category WHERE  category_id=? ;";
                    pst = conn1.prepareStatement(deleteCategorySql); // SQLクエリを準備
                    pst.setInt(1, category_id); // IDをクエリに設定
                    pst.executeUpdate(); // クエリを実行
                    pst.close();

                    tableUpdate(); // テーブルを更新

                    txtcategory.setText(""); // テキストフィールドをクリア
                    txtstatus.setSelectedIndex(0); // ドロップダウンをリセット
                    txtcategory.requestFocus(); // テキストフィールドにフォーカスを移動
                } else {
                    JOptionPane.showMessageDialog(null, "その他カテゴリを作成できませんでした。");
                }
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(Category.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // 登録ボタンのアクションハンドラー

        String category = txtcategory.getText(); // テキストフィールドからカテゴリー名を取得
        String status = txtstatus.getSelectedItem().toString(); // ドロップダウンからステータスを取得

        if (!category.isEmpty() && !status.isEmpty()) {  // カテゴリー名とステータスが空でないことを確認
            try (Connection conn1 = getConnection()) {

                String checkSql = "SELECT COUNT(*) FROM Category WHERE category = ?;";
                pst = conn1.prepareStatement(checkSql); // カテゴリーの存在チェッククエリを準備
                pst.setString(1, category); // カテゴリー名をクエリに設定
                ResultSet rs = pst.executeQuery(); // クエリを実行して結果セットを取得
                rs.next();
                int count = rs.getInt(1); // 結果セットからカテゴリーの存在数を取得
                if (count > 0) {
                    JOptionPane.showMessageDialog(null, "このカテゴリーはすでに存在します。");  // 重複メッセージを表示
                } else {

                    String sql = "INSERT INTO Category (category, status) VALUES (?, ?);";
                    pst = conn1.prepareStatement(sql); // 挿入クエリを準備

                    pst.setString(1, category); // カテゴリー名をクエリに設定
                    pst.setString(2, status); // ステータスをクエリに設定
                    pst.executeUpdate(); // クエリを実行
                    JOptionPane.showMessageDialog(null, "新規カテゴリーを追加しました。");  // 成功メッセージを表示
                    tableUpdate(); // テーブルを更新
                }
                txtcategory.setText("");
                txtstatus.setSelectedIndex(0);
                txtcategory.requestFocus(); // テキストフィールドにフォーカスを移動
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(Category.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "カテゴリーを入力してください。");  // 入力エラーメッセージを表示
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // テーブル行クリックのアクションハンドラー
        DefaultTableModel d1 = (DefaultTableModel) jTable1.getModel(); // テーブルモデルを取得
        int selectIndex = jTable1.getSelectedRow(); // 選択された行のインデックスを取得

        txtcategory.setText(d1.getValueAt(selectIndex, 1).toString()); // 選択された行のカテゴリー名をテキストフィールドに設定
        txtstatus.setSelectedItem(d1.getValueAt(selectIndex, 2).toString()); // 選択された行のステータスをドロップダウンに設定
    }//GEN-LAST:event_jTable1MouseClicked

    private void txtstatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtstatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtstatusActionPerformed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        Category c = new Category();
        this.hide();
        c.setVisible(true);
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        Inventory i = new Inventory();
        this.hide();
        i.setVisible(true);
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        POS pos = new POS();
        this.hide();
        pos.setVisible(true);
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        Product p = new Product();
        this.hide();
        p.setVisible(true);
    }//GEN-LAST:event_jLabel9MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        Order o = new Order();
        this.hide();
        o.setVisible(true);
    }//GEN-LAST:event_jLabel4MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Category.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Category.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Category.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Category.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Category().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtcategory;
    private javax.swing.JComboBox<String> txtstatus;
    // End of variables declaration//GEN-END:variables
}
